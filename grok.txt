   

// frequency with decay

class ShoppingList {
  constructor() {
    this.inventory = {};
    this.frequency = {};
    this.toBuyList = [];
    this.decayRate = 0.1; // Adjust this value to control how fast items 'age'
    this.lastDecayTime = Date.now(); // Track the last time decay was applied
  }

  addItemToInventory(item) {
    if (!this.inventory[item]) {
      this.inventory[item] = 0;
    }
    if (!this.frequency[item]) {
      this.frequency[item] = 0;
    }
  }

  addToBuyList(item) {
    if (!this.toBuyList.includes(item)) {
      this.toBuyList.push(item);
    }
    this.frequency[item] = (this.frequency[item] || 0) + 1;
    this.applyDecay(); // Decay frequency when an item is added
  }

  // Apply decay to all items' frequencies
  applyDecay() {
    const now = Date.now();
    // Only apply decay if enough time has passed, here set to every 24 hours for example
    if (now - this.lastDecayTime > 24 * 60 * 60 * 1000) { // 24 hours in milliseconds
      for (let item in this.frequency) {
        // This is a simple decay. You might want to use something like log for less aggressive decay on high frequency items
        this.frequency[item] = Math.max(0, this.frequency[item] - this.decayRate);
      }
      this.lastDecayTime = now;
    }
  }

  sortToBuyList() {
    this.toBuyList.sort((a, b) => {
      return (this.frequency[b] || 0) - (this.frequency[a] || 0);
    });
  }

  getSortedToBuyList() {
    this.sortToBuyList();
    return this.toBuyList;
  }
}

// Usage example:
const shoppingList = new ShoppingList();
shoppingList.addItemToInventory("milk");
shoppingList.addItemToInventory("eggs");
shoppingList.addItemToInventory("bread");

// Simulate usage over time
for (let i = 0; i < 10; i++) {
  shoppingList.addToBuyList("milk"); // Milk frequency increases
  // Simulating time passing or other actions that might trigger decay
  shoppingList.applyDecay();
}

// After some time, without buying 'milk'
for (let i = 0; i < 5; i++) {
  shoppingList.addToBuyList("bread"); // Bread frequency increases, milk decays
  shoppingList.applyDecay();
}

console.log(shoppingList.getSortedToBuyList()); // Milk might not be at the top anymore





Here are several other ordering sequences you could implement in your shopping list app:

1. Last Purchased
Description: Sort items based on the most recent purchase date. This can help in remembering when you last bought something.
Implementation: Keep track of the last time each item was added to the shopping list or marked as bought.

2. Purchase History (Total Times Bought)
Description: Similar to frequency but specifically for purchases instead of just selections.
Implementation: Count how many times an item has been marked as purchased rather than just added to the list.

3. Price (High to Low or Low to High)
Description: If you allow users to input or estimate the price of items, sorting by price can help with budget management.
Implementation: Maintain a price attribute for each item.

4. Category
Description: Group items by category (e.g., dairy, produce, bakery) which can be useful for navigating a supermarket layout.
Implementation: Assign categories to items and sort by category, then by another criterion like alphabetical within each category.

5. Expiration or Shelf Life
Description: Useful for planning meals or understanding which items to buy first if they spoil quickly.
Implementation: Users could input or select from a list of common expiration times for items.

6. Urgency
Description: Users can rate how urgently they need an item, which could be adjusted manually or automatically based on inventory levels or expiration dates.
Implementation: Add an urgency score to each item, perhaps on a scale from 1 to 5.

7. Seasonal
Description: Sort by relevance to the current season, which could affect availability, price, or personal preference.
Implementation: Define seasons for items or use current date to determine seasonal relevance.

8. Health or Dietary Priority
Description: If your app tracks dietary preferences or health goals, sorting by these criteria could be beneficial.
Implementation: Tag items with dietary info (e.g., gluten-free, low-carb) and sort based on user's dietary priorities.

9. Promotion
Description: If your app integrates with store promotions or if users input current deals, sorting by promotional status could save money.
Implementation: Mark items as 'on sale' or with a discount percentage.

10. Custom Order
- **Description**: Beyond just moving items manually, allow users to save multiple custom orders for different scenarios (e.g., different store layouts or shopping habits).
- **Implementation**: Store different custom orders with unique names or IDs that the user can select from.
Implementation Tips:
User Interface: Ensure there's an easy way for users to switch between these sorting options, perhaps through a dropdown or tab interface.
Performance: When implementing these, consider the performance impact, especially if the list grows large. Efficient data structures and lazy loading might be necessary.
Storage: Decide if you'll store all this data locally or synchronize with a backend for persistence across devices.

Remember, the key to a good user experience here is flexibility and ease of use, allowing users to tailor the list to their shopping habits and preferences.

